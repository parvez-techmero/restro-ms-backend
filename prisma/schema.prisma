// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             Int          @id @default(autoincrement())
  name           String
  location       String
  phone          String?
  email          String
  password       String
  opening_hours  String?
  status         String       @default("active")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  customers      Customer[]
  categories     Category[]
  menuItems      MenuItem[]
  tables         Table[]
  reservations   Reservation[]
  orders         Order[]
  activityLogs   ActivityLog[]
}

model Customer {
  id          Int       @id @default(autoincrement())
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  name        String
  email       String     @unique
  phone       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  orders      Order[]
  activityLogs ActivityLog[]
}

model Category {
  id           Int         @id @default(autoincrement())
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  name         String
  description  String?
  displayOrder Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  menuItems    MenuItem[]
}

model MenuItem {
  id            Int         @id @default(autoincrement())
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId  Int
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    Int
  name          String
  price         Decimal     @db.Decimal(10, 2)
  description   String?
  ingredients   String?
  servesPeople  String?
  spiceLevel    String?
  allergens     String?
  imageUrl      String?
  isAvailable   Boolean     @default(true)
  similarItems  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  orderItems   OrderItem[]
}

model Table {
  id           Int         @id @default(autoincrement())
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  tableNumber  String
  capacity     Int
  location     String?
  status       String      @default("available")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  reservations Reservation[]
  orders       Order[]
}

model Reservation {
  id              Int         @id @default(autoincrement())
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId    Int
  table           Table       @relation(fields: [tableId], references: [id])
  tableId         Int
  customerName    String
  customerPhone   String
  reservationTime DateTime
  guestCount      Int
  status          String      @default("pending")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Order {
  id           Int         @id @default(autoincrement())
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  table        Table?      @relation(fields: [tableId], references: [id])
  tableId      Int?
  customer     Customer        @relation(fields: [customerId], references: [id])
  customerId   Int
  orderType    String      // dine-in, takeaway, delivery
  status       String      @default("pending")
  totalAmount  Decimal     @db.Decimal(10, 2)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  orderItems   OrderItem[]
}

model OrderItem {
  id         Int       @id @default(autoincrement())
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    Int
  menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  quantity   Int
  price      Decimal   @db.Decimal(10, 2)
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ActivityLog {
  id            Int         @id @default(autoincrement())
  customer      Customer        @relation(fields: [customerId], references: [id])
  customerId    Int
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId  Int
  actionType    String
  actionData    String?
  timestamp     DateTime    @default(now())
}